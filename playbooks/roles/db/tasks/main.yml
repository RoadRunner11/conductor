---
- name: Update apt cache
  become: yes
  apt: update_cache=yes cache_valid_time=604800

- name: Install PostgreSQL
  become: yes
  apt: name={{ item }} state=present
  with_items:
    - libpq-dev
    - postgresql
    # The Python 2 version is around for Ansible, not Django.
    - python-psycopg2
    - python3-psycopg2

- name: Install dependencies for PostgreSQL backup via wal-e
  become: yes
  apt: name={{ item }} state=present
  with_items:
    - lzop
    - pv
    # daemontools isn't a dependency, but it provides the envdir command.
    # This is needed to avoid storing secrets in the archive command.
    - daemontools

- name: Set PostgreSQL configuration
  become: yes
  template:
    src: postgresql.conf.j2
    dest: /etc/postgresql/9.5/main/postgresql.conf
    owner: postgres
    group: postgres
    mode: 0644
  notify:
    - Restart PostgreSQL

- name: Create locale
  become: yes
  locale_gen: name=en_US.UTF-8 state=present

# On dev, ran:
# create database conductor encoding 'UTF8'
# lc_collate 'en_US.UTF-8' lc_ctype 'en_US.UTF-8' template template0;
- name: Create the database
  become: yes
  become_user: postgres
  postgresql_db:
    name={{ postgres.db }}
    encoding='UTF8'
    lc_collate='en_US.UTF-8'
    lc_ctype='en_US.UTF-8'
    state=present
    template='template0'

# On dev, ran:
# create role conductor password 'conductor' login nosuperuser nocreatedb;
- name: Create the database user
  become: yes
  become_user: postgres
  postgresql_user: >
    db={{ postgres.db }}
    name={{ postgres.user }}
    password={{ postgres.password }}
    role_attr_flags=NOSUPERUSER,NOCREATEDB
    state=present

- name: Create wal-e env directory
  become: yes
  file:
    state: directory
    path: /etc/wal-e/env
    owner: root
    group: postgres
    mode: 0750
    recurse: yes

- name: Set environment variables for wal-e
  become: yes
  copy:
    content: "{{ item.value }}"
    dest: "/etc/wal-e/env/{{ item.variable }}"
    owner: root
    group: postgres
    mode: 0750
  with_items:
    - { variable: AWS_ACCESS_KEY_ID, value: "{{ aws.access_key_id }}" }
    - { variable: AWS_SECRET_ACCESS_KEY, value: "{{ aws.secret_access_key }}" }
    - { variable: AWS_REGION, value: "{{ aws.region }}" }
    - { variable: WALE_S3_PREFIX, value: "{{ wale.s3_prefix }}" }
  no_log: True
