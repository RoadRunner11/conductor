---
- name: Install Supervisor
  become: yes
  apt: name=supervisor state=present

- name: Install Nginx
  become: yes
  apt: name=nginx-core state=present
  notify:
    - Start Nginx

- name: Install Git
  become: yes
  apt: name=git state=present

- name: Install Psycopg2
  become: yes
  apt: name=python3-psycopg2 state=present

- name: Install Python package tools
  become: yes
  apt: name={{ item }} state=present
  with_items:
    - python3-pip
    - python-virtualenv
    # TODO: This was needed for Vagrant. I'm not sure why this was needed
    # as I thought this was all running on Python 3.
    - python-boto3  # To do S3 downloads
    - python3-boto3  # To do S3 downloads

- name: Install fail2ban
  become: yes
  apt: name=fail2ban state=present

- name: Install NTP
  become: yes
  apt:
    name: ntp
    state: present

- name: Permit HTTP traffic
  become: yes
  ufw: rule=allow port=http proto=tcp

- name: Permit SSH traffic
  become: yes
  ufw: rule=allow port=ssh proto=tcp

- name: Enable the firewall
  become: yes
  ufw: state=enabled

- template: src=jail.local.j2 dest=/etc/fail2ban/jail.local
  become: yes
  notify:
    - Restart fail2ban

- name: Create resource account
  become: yes
  user: name=conductor createhome=no state=present

- name: Create root .ssh directory
  become: yes
  file: path=/root/.ssh owner=root group=root mode=0700 state=directory

- name: Add ssh private key
  become: yes
  copy: content="{{ ssh_private_key }}" dest=/root/.ssh/id_rsa mode="u=rw,g=,o="

- name: Create apps directory
  become: yes
  file:
    path: /srv/apps
    state: directory

- name: Create app directory
  become: yes
  file: path={{ app_path }} state=directory

- name: Fetch from GitHub
  become: yes
  git:
    repo: git@github.com:mblayman/conductor.git
    dest: "{{ app_path }}"
    accept_hostkey: yes
  notify:
    - Restart application
  register: gitfetch

- name: Pull latest app from S3
  become: yes
  aws_s3:
    bucket: collegeconductor
    object: "/apps/conductor-{{ gitfetch.after }}.pyz"
    dest: "/srv/apps/conductor-{{ gitfetch.after }}.pyz"
    mode: get
    aws_access_key: "{{ vault.aws.access_key_id }}"
    aws_secret_key: "{{ vault.aws.secret_access_key }}"

- name: Set the app executable
  become: yes
  file:
    state: file
    path: "/srv/apps/conductor-{{ gitfetch.after }}.pyz"
    owner: www-data
    group: www-data
    mode: 0750

- name: Link to new app version
  become: yes
  file:
    state: link
    src: "/srv/apps/conductor-{{ gitfetch.after }}.pyz"
    dest: "/srv/apps/conductor.pyz"
    owner: www-data
    group: www-data

- name: Install Python dependencies
  become: yes
  pip:
    requirements: "{{ app_path }}/requirements.txt"
    virtualenv: "{{ venv_path }}"
    virtualenv_site_packages: yes
    virtualenv_python: python3
  notify:
    - Restart application

- name: Install frontend dependencies
  become: yes
  command: npm ci --unsafe-perm
  args:
    chdir: "{{ frontend_path }}"

- name: Build frontend
  become: yes
  command: npm run build
  args:
    chdir: "{{ frontend_path }}"

- name: Enable supervisor
  become: yes
  systemd:
    name: supervisor
    enabled: yes
    state: started

- name: Create the settings directory
  become: yes
  file:
    state: directory
    path: "/srv/apps/settings"
    owner: www-data
    group: www-data
    mode: 0750

- name: Copy the settings directory
  become: yes
  copy:
    src: ../settings/
    dest: "/srv/apps/settings"
    owner: www-data
    group: www-data
    mode: 0640
  notify:
    - Restart Supervisor

- name: Set secret settings file
  become: yes
  template:
    src: _secrets.py
    dest: "/srv/apps/settings/_secrets.py"
  notify:
    - Restart Supervisor

- name: Set secret settings file
  become: yes
  template:
    src: _secrets.py
    dest: "{{ app_path }}/settings/_secrets.py"
  notify:
    - Restart Supervisor

- name: Prime the app to pre-extract to the Shiv root area
  become: yes
  shell: "/srv/apps/conductor.pyz manage"
  args:
    chdir: "/srv/apps/"
  environment: "{{ django_env }}"

- template: src=supervisord.conf.j2 dest=/etc/supervisor/supervisord.conf
  become: yes
  notify:
    - Restart Supervisor

- template: src=conductor.conf.j2 dest=/etc/supervisor/conf.d/conductor.conf
  become: yes
  notify:
    - Restart Supervisor

- name: Provide environment for manage.py commands
  template: src=env.j2 dest=/srv/.env
  become: yes

- name: Create /var/www
  become: yes
  file: state=directory path=/var/www owner=root group=www-data mode=0750

- name: Create STATIC_ROOT
  become: yes
  file:
    state: directory
    path: "{{ static_root }}"
    owner: www-data
    group: www-data
    mode: 0750

- name: Create MEDIA_ROOT
  become: yes
  file:
    state: directory
    path: /var/www/media/
    owner: www-data
    group: www-data
    mode: 0750
  when: deployment == "development"

- name: Migrate the database
  become: yes
  django_manage: command=migrate app_path={{ app_path }} virtualenv={{ venv_path }}
  environment: "{{ django_env }}"

- name: Create templates directory
  become: yes
  file:
    state: directory
    path: /srv/apps/templates/
    owner: www-data
    group: www-data
    mode: 0750

- name: Make sitemap.xml
  become: yes
  shell: "/srv/apps/conductor.pyz manage makesitemap /srv/apps/templates/sitemap.xml"
  args:
    chdir: "/srv/apps/"
  environment: "{{ django_env }}"

# - name: Collect static files
#   become: yes
#   become_user: www-data
#   # Ansible has some weird permission error with becoming
#   # a different user.
#   # See https://github.com/ansible/ansible/issues/16048
#   vars:
#     ansible_ssh_pipelining: true
#   django_manage:
#     command: collectstatic
#     app_path: "{{ app_path }}"
#     virtualenv: "{{ venv_path }}"
#   environment: "{{ django_env }}"

- name: Create assets directory
  become: yes
  file:
    path: /srv/assets
    state: directory

- name: Fetch assets from S3
  become: yes
  aws_s3:
    bucket: collegeconductor
    object: "/assets/assets-{{ gitfetch.after }}.tar.gz"
    dest: "/srv/assets/assets-{{ gitfetch.after }}.tar.gz"
    mode: get
    aws_access_key: "{{ vault.aws.access_key_id }}"
    aws_secret_key: "{{ vault.aws.secret_access_key }}"

- name: Extract assets to static root
  become: yes
  shell: "tar xzf assets-{{ gitfetch.after }}.tar.gz -C {{ static_root }}"
  args:
    chdir: "/srv/assets/"
